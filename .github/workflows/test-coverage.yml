name: Test Coverage Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  COVERAGE_THRESHOLD: 85

jobs:
  # Backend tests with coverage
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
      
    - name: Backend unit tests
      run: |
        cd backend
        cargo test --lib
        
    - name: Backend integration tests
      run: |
        cd backend
        cargo test --test '*'
        
    - name: Backend coverage
      run: |
        cd backend
        cargo tarpaulin --out xml --output-dir ../coverage/backend --fail-under ${{ env.COVERAGE_THRESHOLD }}
        
    - name: Upload backend coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/backend/cobertura.xml
        flags: backend
        name: backend-coverage

  # Gateway tests with coverage
  gateway-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
      
    - name: Gateway unit tests
      run: |
        cd gateway
        cargo test --lib
        
    - name: Gateway integration tests
      run: |
        cd gateway
        cargo test --test '*'
        
    - name: Gateway coverage
      run: |
        cd gateway
        cargo tarpaulin --out xml --output-dir ../coverage/gateway --fail-under ${{ env.COVERAGE_THRESHOLD }}
        
    - name: Upload gateway coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/gateway/cobertura.xml
        flags: gateway
        name: gateway-coverage

  # Frontend tests with coverage
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      
    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
      
    - name: Install dependencies
      run: |
        cd frontend
        bun install
        
    - name: Frontend unit tests
      run: |
        cd frontend
        bun test --coverage --coverageThreshold=${{ env.COVERAGE_THRESHOLD }}
        
    - name: Frontend integration tests
      run: |
        cd frontend
        bun test --integration --coverage --coverageThreshold=${{ env.COVERAGE_THRESHOLD }}
        
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/cobertura.xml
        flags: frontend
        name: frontend-coverage

  # Coverage summary
  coverage-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, gateway-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate coverage summary
      run: |
        echo "## Coverage Summary"
        echo "All projects have achieved ≥ 85% test coverage"
        echo "- Backend: ✅"
        echo "- Gateway: ✅"
        echo "- Frontend: ✅"
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `
          ## ✅ Coverage Requirements Met
          
          All projects have achieved ≥ 85% test coverage:
          - **Backend**: ✅
          - **Gateway**: ✅
          - **Frontend**: ✅
          
          **Note**: Only unit tests and integration tests can break the build.
          Quality issues (formatting, linting) will not break the build.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });