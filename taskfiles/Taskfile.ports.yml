# Taskfile para gestion de puertos
# Maneja asignacion, verificacion y configuracion de puertos

version: "3"

vars:
  PYTHON: python3
  SCRIPTS_DIR: scripts/infrastructure
  CONFIG_FILE: ports.json
  ENV_FILE: .env.ports

tasks:
  # Comandos principales
  assign:
    desc: Asigna puertos disponibles a todos los servicios
    cmds:
      - echo "Asignando puertos disponibles..."
      - "{{.PYTHON}} {{.SCRIPTS_DIR}}/assign-ports.py"
    sources:
      - "{{.SCRIPTS_DIR}}/assign-ports.py"
    generates:
      - "{{.CONFIG_FILE}}"
      - "{{.ENV_FILE}}"

  check:
    desc: Verifica que puertos estan actualmente en uso
    cmds:
      - echo "Verificando puertos en uso..."
      - bash {{.SCRIPTS_DIR}}/check-ports.sh

  save:
    desc: Guarda la configuracion actual de puertos
    cmds:
      - echo "Guardando configuracion de puertos..."
      - bash {{.SCRIPTS_DIR}}/save-ports.sh

  load:
    desc: Carga una configuracion de puertos previa
    cmds:
      - echo "Cargando configuracion de puertos..."
      - bash {{.SCRIPTS_DIR}}/load-ports.sh

  setup:
    desc: Configura puertos automaticamente
    deps: [assign, validate]
    cmds:
      - echo "Puertos configurados automaticamente"

  validate:
    desc: Valida que los puertos configurados esten disponibles
    cmds:
      - echo "Validando puertos configurados..."
      - bash {{.SCRIPTS_DIR}}/validate-ports.sh

  show:
    desc: Muestra la configuracion actual de puertos
    cmds:
      - echo "Configuracion actual de puertos:"
      - bash {{.SCRIPTS_DIR}}/show-ports.sh || echo "No hay configuracion de puertos"

  clean:
    desc: Limpia la configuracion de puertos
    cmds:
      - echo "Limpiando configuracion de puertos..."
      - rm -f {{.CONFIG_FILE}} {{.ENV_FILE}} || true
      - echo "Configuracion de puertos eliminada"

  reset:
    desc: Resetea y reasigna todos los puertos
    deps: [clean, setup]
    cmds:
      - echo "Puertos reseteados exitosamente"
