# Taskfile para pruebas con requisitos de cobertura
# Solo unit tests e integration tests pueden romper el build

version: "3"

vars:
  SCRIPTS_DIR: scripts/testing
  TRUNK: trunk
  COVERAGE_THRESHOLD: 85

# Architecture: taskfile -> taskfiles -> cargo -> backend/cargo -> gateway/cargo -> frontend/package.json
tasks:
  all:
    desc: Ejecuta todas las pruebas con verificacion de cobertura
    deps: [test:unit, test:integration]
    cmds:
      - echo "Todas las pruebas ejecutadas con cobertura ≥ {{.COVERAGE_THRESHOLD}}%"

  unit:
    desc: Ejecuta pruebas unitarias con cobertura (PUEDE ROMPER BUILD)
    cmds:
      - echo "Ejecutando pruebas unitarias con cobertura ≥ {{.COVERAGE_THRESHOLD}}%..."
      - task: test:unit:backend
      - task: test:unit:frontend
      - task: test:unit:gateway

  integration:
    desc: Ejecuta pruebas de integracion (PUEDE ROMPER BUILD)
    cmds:
      - echo "Ejecutando pruebas de integracion..."
      - bash {{.SCRIPTS_DIR}}/run-integration-tests.sh || exit 1

  # Cobertura por proyecto
  coverage:backend:
    desc: Verifica cobertura del backend (PUEDE ROMPER BUILD)
    cmds:
      - echo "Verificando cobertura del backend..."
      - cd backend && cargo tarpaulin --out xml --output-dir ../coverage/backend --fail-under {{.COVERAGE_THRESHOLD}}

  coverage:frontend:
    desc: Verifica cobertura del frontend (PUEDE ROMPER BUILD)
    dir: frontend
    cmds:
      - echo "Verificando cobertura del frontend..."
      - bun test --coverage --coverageThreshold={{.COVERAGE_THRESHOLD}}

  coverage:gateway:
    desc: Verifica cobertura del gateway (PUEDE ROMPER BUILD)
    dir: gateway
    cmds:
      - echo "Verificando cobertura del gateway..."
      - cargo tarpaulin --out xml --output-dir ../coverage/gateway --fail-under {{.COVERAGE_THRESHOLD}}

  # Pruebas unitarias por proyecto
  test:unit:backend:
    desc: Pruebas unitarias backend con cobertura (PUEDE ROMPER BUILD)
    cmds:
      - echo "Ejecutando pruebas unitarias backend..."
      - cd backend && cargo test --lib && cargo tarpaulin --out xml --output-dir ../coverage/backend --fail-under {{.COVERAGE_THRESHOLD}}

  test:unit:frontend:
    desc: Pruebas unitarias frontend con cobertura (PUEDE ROMPER BUILD)
    dir: frontend
    cmds:
      - echo "Ejecutando pruebas unitarias frontend..."
      - bun test --coverage --coverageThreshold={{.COVERAGE_THRESHOLD}}

  test:unit:gateway:
    desc: Pruebas unitarias gateway con cobertura (PUEDE ROMPER BUILD)
    dir: gateway
    cmds:
      - echo "Ejecutando pruebas unitarias gateway..."
      - cargo test --lib && cargo tarpaulin --out xml --output-dir ../coverage/gateway --fail-under {{.COVERAGE_THRESHOLD}}

  # Pruebas de integracion con cobertura
  test:integration:backend:
    desc: Pruebas de integracion backend (PUEDE ROMPER BUILD)
    cmds:
      - echo "Ejecutando pruebas de integracion backend..."
      - cd backend && cargo test --test '*' && cargo tarpaulin --out xml --output-dir ../coverage/backend-integration --fail-under {{.COVERAGE_THRESHOLD}}

  test:integration:frontend:
    desc: Pruebas de integracion frontend (PUEDE ROMPER BUILD)
    dir: frontend
    cmds:
      - echo "Ejecutando pruebas de integracion frontend..."
      - bun test --integration --coverage --coverageThreshold={{.COVERAGE_THRESHOLD}}

  test:integration:gateway:
    desc: Pruebas de integracion gateway (PUEDE ROMPER BUILD)
    dir: gateway
    cmds:
      - echo "Ejecutando pruebas de integracion gateway..."
      - cargo test --test '*' && cargo tarpaulin --out xml --output-dir ../coverage/gateway-integration --fail-under {{.COVERAGE_THRESHOLD}}

  # Pruebas que NO rompen el build
  e2e:
    desc: Ejecuta pruebas E2E (NO rompe build)
    cmds:
      - echo "Ejecutando pruebas E2E..."
      - bash {{.SCRIPTS_DIR}}/run-e2e-tests.sh || echo "⚠️ Pruebas E2E fallidas - no se rompe el build"

  performance:
    desc: Ejecuta pruebas de rendimiento (NO rompe build)
    cmds:
      - echo "Ejecutando pruebas de rendimiento..."
      - bash {{.SCRIPTS_DIR}}/run-performance.sh || echo "⚠️ Pruebas de rendimiento fallidas - no se rompe el build"

  security:
    desc: Ejecuta pruebas de seguridad (NO rompe build)
    cmds:
      - echo "Ejecutando pruebas de seguridad..."
      - bash {{.SCRIPTS_DIR}}/run-security-tests.sh || echo "⚠️ Pruebas de seguridad fallidas - no se rompe el build"

  load:
    desc: Ejecuta pruebas de carga (NO rompe build)
    cmds:
      - echo "Ejecutando pruebas de carga..."
      - bash {{.SCRIPTS_DIR}}/run-load-tests.sh || echo "⚠️ Pruebas de carga fallidas - no se rompe el build"

  dast:
    desc: Ejecuta pruebas DAST (NO rompe build)
    cmds:
      - echo "Ejecutando pruebas DAST..."
      - bash {{.SCRIPTS_DIR}}/run-dast-tests.sh || echo "⚠️ Pruebas DAST fallidas - no se rompe el build"

  # Cobertura completa
  coverage:all:
    desc: Verifica cobertura completa de todos los proyectos (PUEDE ROMPER BUILD)
    cmds:
      - echo "Verificando cobertura completa..."
      - task: coverage:backend
      - task: coverage:frontend
      - task: coverage:gateway

  # Setup de herramientas de cobertura
  setup:coverage:
    desc: Instala herramientas de cobertura
    cmds:
      - echo "Instalando herramientas de cobertura..."
      - cargo install cargo-tarpaulin || echo "cargo-tarpaulin ya instalado"
      - cd frontend && bun add -D @vitest/coverage-v8 || echo "coverage tools ya instalados"

  # Reportes de cobertura
  coverage:report:
    desc: Genera reporte de cobertura HTML
    cmds:
      - echo "Generando reporte de cobertura..."
      - mkdir -p coverage
      - cd backend && cargo tarpaulin --out html --output-dir ../coverage/backend
      - cd frontend && bun test --coverage --coverage-reporter=html --coverage-directory=../coverage/frontend
      - cd gateway && cargo tarpaulin --out html --output-dir ../coverage/gateway
      - echo "Reportes de cobertura generados en ./coverage/"

  # Limpieza
  clean:
    desc: Limpia resultados de pruebas y cobertura
    cmds:
      - echo "Limpiando resultados de pruebas..."
      - rm -rf test-results coverage || true
      - rm -rf backend/target/debug/deps || true
      - rm -rf frontend/coverage || true

  # Watch mode para desarrollo
  watch:
    desc: Ejecuta tests en modo watch (NO rompe build)
    cmds:
      - echo "Ejecutando tests en modo watch..."
      - cd backend && cargo watch -x test || echo "Watch no configurado"

  # Verificacion rapida de tests
  test:quick:
    desc: Verificacion rapida de tests (NO rompe build)
    cmds:
      - echo "Verificacion rapida de tests..."
      - cd backend && cargo test --lib || echo "Tests backend fallidos"
      - cd frontend && bun test --run || echo "Tests frontend fallidos"
      - cd gateway && cargo test --lib || echo "Tests gateway fallidos"