# Taskfile para calidad de codigo con Trunk CLI - Non-breaking para CI/CD

version: "3"

vars:
  TRUNK: trunk
  GITHUB_TOKEN: "${GITHUB_TOKEN:-}"
  REPO_OWNER: "${GITHUB_REPOSITORY_OWNER:-}"
  REPO_NAME: "${GITHUB_REPOSITORY_NAME:-AlbergueMunicipalCarrascalejo}"

# Architecture: taskfile -> taskfiles -> cargo -> backend/cargo -> gateway/cargo -> frontend/package.json
tasks:
  all:
    desc: Ejecuta todas las herramientas de calidad sin romper el build
    cmds:
      - echo "Ejecutando checks de calidad sin romper el build..."
      - task: fmt:check
      - task: lint:check
      - task: issues:create

  # Non-blocking formatting checks
  fmt:check:
    desc: Verifica formato sin cambios (no rompe build)
    cmds:
      - echo "Verificando formato sin cambios..."
      - "{{.TRUNK}} fmt --all --check || echo '⚠️ Formato incorrecto - no se rompe el build'"

  fmt:report:
    desc: Genera reporte de formato para GitHub issues
    cmds:
      - echo "Generando reporte de formato..."
      - "{{.TRUNK}} fmt --all --check > format-report.txt 2>&1 || true"

  # Non-blocking linting with reports
  lint:check:
    desc: Ejecuta linting y genera reporte sin romper build
    cmds:
      - echo "Ejecutando linting y generando reporte..."
      - "{{.TRUNK}} check --all --output=json > lint-report.json 2>&1 || true"
      - "{{.TRUNK}} check --all --output=summary > lint-summary.txt 2>&1 || true"

  lint:report:
    desc: Ejecuta linting y genera reporte
    cmds:
      - echo "Ejecutando linting y generando reporte..."
      - "{{.TRUNK}} check --all --output=json > lint-report.json 2>&1 || true"

  # GitHub Issues Creation
  issues:create:
    desc: Crea issues para problemas encontrados
    cmds:
      - task: issues:format
      - task: issues:lint

  issues:format:
    desc: Crea issue para problemas de formato
    cmds:
      - |
        if [ -f format-report.txt ] && [ -s format-report.txt ]; then
          echo "Problemas de formato detectados - se crearán issues"
        else
          echo "No hay problemas de formato"
        fi

  issues:lint:
    desc: Crea issue para problemas de linting
    cmds:
      - |
        if [ -f lint-summary.txt ] && [ -s lint-summary.txt ]; then
          echo "Problemas de linting detectados - se crearán issues"
        else
          echo "No hay problemas de linting"
        fi

  # CI/CD friendly commands
  ci:fmt:
    desc: Verifica formato en CI sin romper build
    cmds:
      - echo "Verificando formato en CI..."
      - "{{.TRUNK}} fmt --all --check || exit 0"

  ci:lint:
    desc: Verifica linting en CI sin romper build
    cmds:
      - echo "Verificando linting en CI..."
      - "{{.TRUNK}} check --all || exit 0"

  ci:all:
    desc: Checks completos para CI sin romper build
    cmds:
      - echo "Ejecutando checks CI sin romper build..."
      - task: ci:fmt
      - task: ci:lint

  # Local development with warnings
  dev:check:
    desc: Verifica calidad en desarrollo local
    cmds:
      - echo "Verificando calidad en desarrollo..."
      - "{{.TRUNK}} fmt --all --check || echo '⚠️ Ejecuta task fmt para corregir formato'"
      - "{{.TRUNK}} check --all || echo '⚠️ Ejecuta task lint para corregir linting'"

  # Safe formatting (only if no build errors)
  fmt:safe:
    desc: Formatea solo si no hay errores de build
    cmds:
      - echo "Verificando build antes de formatear..."
      - task: build:check || echo "⚠️ Build tiene errores - formato no aplicado"
      - "{{.TRUNK}} fmt --all"

  # Safe linting (only if no build errors)
  lint:safe:
    desc: Linting solo si no hay errores de build
    cmds:
      - echo "Verificando build antes de linting..."
      - task: build:check || echo "⚠️ Build tiene errores - linting no aplicado"
      - "{{.TRUNK}} check --all --fix"

  # Build verification
  build:check:
    desc: Verifica que el build funciona
    cmds:
      - echo "Verificando build..."
      - cd backend && cargo check || exit 1
      - cd gateway && cargo check || exit 1
      - cd frontend && bun run build || exit 1

  # Technology-specific non-breaking checks
  fmt:rust:check:
    desc: Verifica formato Rust sin romper build
    cmds:
      - echo "Verificando formato Rust..."
      - "{{.TRUNK}} fmt --filter=rustfmt --check || echo '⚠️ Formato Rust inconsistente'"

  fmt:frontend:check:
    desc: Verifica formato frontend sin romper build
    dir: frontend
    cmds:
      - echo "Verificando formato frontend..."
      - "{{.TRUNK}} fmt --filter=prettier,stylelint --check || echo '⚠️ Formato frontend inconsistente'"

  lint:rust:check:
    desc: Verifica linting Rust sin romper build
    cmds:
      - echo "Verificando linting Rust..."
      - "{{.TRUNK}} check --filter=clippy,rustfmt || echo '⚠️ Linting Rust encontrado'"

  lint:frontend:check:
    desc: Verifica linting frontend sin romper build
    dir: frontend
    cmds:
      - echo "Verificando linting frontend..."
      - "{{.TRUNK}} check --filter=eslint,stylelint,prettier || echo '⚠️ Linting frontend encontrado'"

  # Report generation
  report:all:
    desc: Genera reporte completo de calidad
    cmds:
      - echo "Generando reporte completo de calidad..."
      - mkdir -p reports
      - "{{.TRUNK}} fmt --all --check > reports/format-report.txt 2>&1 || true"
      - "{{.TRUNK}} check --all --output=json > reports/lint-report.json 2>&1 || true"
      - "{{.TRUNK}} check --all --output=summary > reports/quality-summary.txt 2>&1 || true"
      - echo "Reportes generados en ./reports/"

  # Utilidades
  status:
    desc: Muestra estado de calidad sin romper build
    cmds:
      - echo "Estado de calidad del proyecto:"
      - "{{.TRUNK}} check --monitor=false || echo '⚠️ Problemas detectados'"

  clean:
    desc: Limpia cache de Trunk
    cmds:
      - echo "Limpiando cache de Trunk..."
      - "{{.TRUNK}} clean"