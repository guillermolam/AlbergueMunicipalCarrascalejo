version: '3'

includes:
  ports: ./taskfiles/Taskfile.ports.yml
  setup: ./taskfiles/Taskfile.setup.yml
  dev: ./taskfiles/Taskfile.dev.yml
  build: ./taskfiles/Taskfile.build.yml
  test: ./taskfiles/Taskfile.test.yml
  quality: ./taskfiles/Taskfile.quality.yml
  act: ./taskfiles/Taskfile.act.yml

vars:
  PROJECT_NAME: "AlbergueMunicipalCarrascalejo"
  PYTHON: python3
  BUN: bun
  CARGO: cargo
  TRUNK: trunk
  COVERAGE_THRESHOLD: 85

tasks:
  # Default task that runs complete pipeline with coverage requirements
  default:
    desc: Complete development pipeline con requisitos de cobertura
    cmds:
      - echo "Starting complete development pipeline with 85% coverage requirement..."
      - task: setup:coverage
      - task: test:unit
      - task: test:integration
      - task: coverage:all
      - task: build
      - task: start
      - echo "Pipeline completed - coverage â‰¥ {{.COVERAGE_THRESHOLD}}% verified"

  # Non-breaking formatting check
  fmt:
    desc: Check formatting without breaking build
    cmds:
      - task: quality:fmt:check

  # Non-breaking linting check
  lint:
    desc: Check linting without breaking build
    cmds:
      - task: quality:lint:check

  # Check quality without changes (non-breaking)
  check:
    desc: Check quality without making changes
    cmds:
      - task: quality:dev:check

  # CI/CD pipeline with coverage requirements
  ci:
    desc: CI pipeline con requisitos de cobertura (solo tests rompen build)
    cmds:
      - echo "Running CI pipeline with coverage requirements..."
      - task: setup:coverage
      - task: test:unit
      - task: test:integration
      - task: coverage:all
      - task: build:all

  # Pre-commit hooks (only tests can break build)
  pre-commit:
    desc: Pre-commit checks con cobertura
    cmds:
      - task: test:unit:quick
      - task: quality:ci:all

  # Quick tests (can break build)
  test:unit:quick:
    desc: Quick unit tests (PUEDE ROMPER BUILD)
    cmds:
      - echo "Running quick unit tests..."
      - cd backend && cargo test --lib
      - cd frontend && bun test --run
      - cd gateway && cargo test --lib

  # Full test suite with coverage (can break build)
  test:
    desc: Full test suite with coverage (PUEDE ROMPER BUILD)
    cmds:
      - task: test:unit
      - task: test:integration
      - task: coverage:all

  # Coverage verification (can break build)
  coverage:
    desc: Verify 85% coverage across all projects (PUEDE ROMPER BUILD)
    cmds:
      - task: test:coverage:all

  # Build (non-breaking for quality issues)
  build:
    desc: Build all services (quality issues no rompen build)
    cmds:
      - task: build:all

  # Start development environment
  start:
    desc: Start development environment
    cmds:
      - task: dev:start

  # Development workflow with coverage
  dev:
    desc: Development workflow con cobertura
    cmds:
      - echo "Development workflow with coverage requirements..."
      - task: quality:dev:check
      - task: test:unit:quick
      - task: build
      - task: start

  # Setup coverage tools
  setup:coverage:
    desc: Install coverage tools
    cmds:
      - task: test:setup:coverage

  # Coverage reports
  coverage:report:
    desc: Generate coverage reports
    cmds:
      - task: test:coverage:report

  # Coverage verification (can break build)
  coverage:all:
    desc: Verify coverage across all projects (PUEDE ROMPER BUILD)
    cmds:
      - task: test:coverage:all

  # Report generation
  report:
    desc: Generate quality and coverage reports
    cmds:
      - task: quality:report:all
      - task: test:coverage:report

  # Help and status
  help:
    desc: Show help
    cmds:
      - task --list-all

  status:
    desc: Show project status with coverage
    cmds:
      - echo "Project Status with Coverage Requirements:"
      - task: ports:show
      - echo
      - task: dev:status
      - echo
      - task: quality:status

  # Cleanup
  clean:
    desc: Clean everything including coverage
    cmds:
      - echo "Cleaning everything including coverage..."
      - task: quality:clean
      - task: build:clean
      - task: test:clean
      - task: ports:clean
      - task: dev:clean

  # Act workflow runner
  act:
    desc: Run GitHub Actions workflows locally with act
    cmds:
      - echo "Running GitHub Actions workflows locally..."
      - echo "Available act commands:"
      - echo "  task act:setup-act    - Install act"
      - echo "  task act:run-quality  - Run quality workflow"
      - echo "  task act:run-tests    - Run tests workflow"
      - echo "  task act:run-push     - Run on push event"
      - echo "  task act:run-pr       - Run on PR event"
      - echo "  task act:list         - List workflows"
      - echo "  task act:help         - Show help"