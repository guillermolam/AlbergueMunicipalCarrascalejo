version: '3'

vars:
  FRONTEND_PORT:
    sh: python3 -c "import socket; s=socket.socket(); s.bind(('', 0)); print(s.getsockname()[1]); s.close()"
  GATEWAY_PORT:
    sh: python3 -c "import socket; s=socket.socket(); s.bind(('', 0)); print(s.getsockname()[1]); s.close()"
  AUTH_FRONTEND_PORT:
    sh: python3 -c "import socket; s=socket.socket(); s.bind(('', 0)); print(s.getsockname()[1]); s.close()"
  BOOKING_PORT:
    sh: python3 -c "import socket; s=socket.socket(); s.bind(('', 0)); print(s.getsockname()[1]); s.close()"
  NOTIFICATION_PORT:
    sh: python3 -c "import socket; s=socket.socket(); s.bind(('', 0)); print(s.getsockname()[1]); s.close()"
  VALIDATION_PORT:
    sh: python3 -c "import socket; s=socket.socket(); s.bind(('', 0)); print(s.getsockname()[1]); s.close()"
  INFO_ARRIVAL_PORT:
    sh: python3 -c "import socket; s=socket.socket(); s.bind(('', 0)); print(s.getsockname()[1]); s.close()"
  LOCATION_PORT:
    sh: python3 -c "import socket; s=socket.socket(); s.bind(('', 0)); print(s.getsockname()[1]); s.close()"
  RATE_LIMITER_PORT:
    sh: python3 -c "import socket; s=socket.socket(); s.bind(('', 0)); print(s.getsockname()[1]); s.close()"
  REVIEWS_PORT:
    sh: python3 -c "import socket; s=socket.socket(); s.bind(('', 0)); print(s.getsockname()[1]); s.close()"
  SECURITY_PORT:
    sh: python3 -c "import socket; s=socket.socket(); s.bind(('', 0)); print(s.getsockname()[1]); s.close()"
  FRONTEND_URI: "http://0.0.0.0:{{.FRONTEND_PORT}}"
  GATEWAY_URI: "http://0.0.0.0:{{.GATEWAY_PORT}}"
  AUTH_FRONTEND_URI: "http://0.0.0.0:{{.AUTH_FRONTEND_PORT}}"

env:
  RUST_BACKTRACE: "1"
  RUST_LOG: "debug"
  NODE_ENV: "development"
  DATABASE_URL: "postgresql://localhost:5432/albergue_dev"

tasks:
  # ============================================================================
  # UTILIDADES DE PUERTOS
  # ============================================================================

  ports:show:
    desc: Show all assigned dynamic ports
    cmds:
      - echo "üåê Puertos Asignados Din√°micamente:"
      - echo "   Frontend Principal:{{.FRONTEND_PORT}}"
      - echo "   Gateway BFF:{{.GATEWAY_PORT}}"
      - echo "   Auth Frontend:{{.AUTH_FRONTEND_PORT}}"
      - echo ""
      - echo "üîß Microservicios Backend:"
      - echo "   Booking Service:{{.BOOKING_PORT}}"
      - echo "   Notification Service:{{.NOTIFICATION_PORT}}"
      - echo "   Validation Service:{{.VALIDATION_PORT}}"
      - echo "   Info Arrival Service:{{.INFO_ARRIVAL_PORT}}"
      - echo "   Location Service:{{.LOCATION_PORT}}"
      - echo "   Rate Limiter Service:{{.RATE_LIMITER_PORT}}"
      - echo "   Reviews Service:{{.REVIEWS_PORT}}"
      - echo "   Security Service:{{.SECURITY_PORT}}"
      - echo ""
      - echo "üîó URLs de Acceso:"
      - echo "   Frontend:{{.FRONTEND_URI}}"
      - echo "   Gateway:{{.GATEWAY_URI}}"
      - echo "   Auth Frontend:{{.AUTH_FRONTEND_URI}}"

  ports:save:
    desc: Save current port configuration to .env file
    cmds:
      - |
        cat > .env.ports << EOF
        # Puertos generados din√°micamente - $(date)
        FRONTEND_PORT={{.FRONTEND_PORT}}
        GATEWAY_PORT={{.GATEWAY_PORT}}
        AUTH_FRONTEND_PORT={{.AUTH_FRONTEND_PORT}}
        BOOKING_PORT={{.BOOKING_PORT}}
        NOTIFICATION_PORT={{.NOTIFICATION_PORT}}
        VALIDATION_PORT={{.VALIDATION_PORT}}
        INFO_ARRIVAL_PORT={{.INFO_ARRIVAL_PORT}}
        LOCATION_PORT={{.LOCATION_PORT}}
        RATE_LIMITER_PORT={{.RATE_LIMITER_PORT}}
        REVIEWS_PORT={{.REVIEWS_PORT}}
        SECURITY_PORT={{.SECURITY_PORT}}
        EOF
      - echo "‚úÖ Puertos guardados en .env.ports"

  # ============================================================================
  # PUNTOS DE ENTRADA PRINCIPALES
  # ============================================================================

  default:
    desc: Run full CI/CD pipeline
    cmds:
      - task: ci:full

  dev:
    desc: Run all services in development mode with dynamic ports
    deps: [setup:check, setup:deps, ports:show]
    cmds:
      - task: dev:all

  ci:full:
    desc: Complete CI/CD pipeline with all checks
    deps: 
      - setup:check
      - setup:deps
      - format:check
      - lint:all
      - sast:all
      - test:unit
      - build:all
      - test:integration
      - test:e2e
      - security:dast
      - performance:all
      - compatibility:all

  # ============================================================================
  # CONFIGURACI√ìN Y VERIFICACI√ìN
  # ============================================================================

  setup:check:
    desc: Verify development environment
    cmds:
      - echo "üîç Verificando entorno de desarrollo..."
      - rustc --version
      - node --version
      - bun --version
      - caddy version
      - spin --version
      - trunk --version
      - echo "‚úÖ Entorno de desarrollo listo"

  setup:deps:
    desc: Install all dependencies
    deps: [setup:deps:frontend, setup:deps:auth-frontend, setup:deps:rust]

  setup:deps:frontend:
    desc: Install main frontend dependencies
    cmds:
      - echo "üì¶ Instalando dependencias del frontend principal..."
      - cd frontend && bun install

  setup:deps:auth-frontend:
    desc: Install auth service frontend dependencies
    cmds:
      - echo "üì¶ Instalando dependencias del frontend de auth..."
      - cd backend/auth-service/app && bun install

  setup:deps:rust:
    desc: Install Rust dependencies and components
    cmds:
      - echo "ü¶Ä Instalando dependencias de Rust..."
      - rustup target add wasm32-wasi || echo "wasm32-wasi target already added"
      - cargo fetch --workspace

  setup:trunk:
    desc: Install and configure Trunk.io for linting
    cmds:
      - |
        if ! command -v trunk >/dev/null 2>&1; then
          echo "üì• Instalando Trunk.io..."
          curl https://get.trunk.io -fsSL | bash || echo "‚ö†Ô∏è  Trunk.io installation failed"
        fi
      - trunk init || echo "‚ö†Ô∏è  Trunk.io already initialized"
      - trunk check enable clippy rustfmt eslint prettier semgrep bandit || echo "‚ö†Ô∏è  Some trunk checks already enabled"

  # ============================================================================
  # FORMATEO DE C√ìDIGO
  # ============================================================================

  format:all:
    desc: Format all code (Rust + Frontend + Auth Frontend)
    deps: [format:rust, format:frontend, format:auth-frontend]

  format:rust:
    desc: Format all Rust code in workspace
    cmds:
      - echo "üé® Formateando c√≥digo Rust..."
      - cargo fmt --all --workspace

  format:frontend:
    desc: Format main frontend code
    dir: frontend
    cmds:
      - echo "üé® Formateando frontend principal..."
      - |
        if command -v prettier >/dev/null 2>&1; then
          npx prettier --write "src/**/*.{ts,tsx,js,jsx,json,css,md}" || echo "‚ö†Ô∏è  Prettier formatting failed"
        else
          echo "‚ö†Ô∏è  Prettier not available, using bun format"
          bun run fmt || echo "‚ö†Ô∏è  Frontend formatting failed"
        fi

  format:auth-frontend:
    desc: Format auth service frontend code
    dir: backend/auth-service/app
    cmds:
      - echo "üé® Formateando frontend de auth..."
      - |
        if command -v prettier >/dev/null 2>&1; then
          npx prettier --write "src/**/*.{ts,tsx,js,jsx,json,css,md}" || echo "‚ö†Ô∏è  Auth frontend formatting failed"
        else
          bun run fmt || echo "‚ö†Ô∏è  Auth frontend formatting failed"
        fi

  format:check:
    desc: Check code formatting
    deps: [format:check:rust, format:check:frontend, format:check:auth-frontend]

  format:check:rust:
    desc: Check Rust formatting
    cmds:
      - cargo fmt --check --workspace

  format:check:frontend:
    desc: Check main frontend formatting
    dir: frontend
    cmds:
      - |
        if command -v prettier >/dev/null 2>&1; then
          npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}" || echo "‚ö†Ô∏è  Frontend formatting check failed"
        else
          echo "‚ö†Ô∏è  Prettier not available, skipping frontend format check"
        fi

  format:check:auth-frontend:
    desc: Check auth frontend formatting
    dir: backend/auth-service/app
    cmds:
      - |
        if command -v prettier >/dev/null 2>&1; then
          npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}" || echo "‚ö†Ô∏è  Auth frontend formatting check failed"
        else
          echo "‚ö†Ô∏è  Prettier not available, skipping auth frontend format check"
        fi

  # ============================================================================
  # LINTING
  # ============================================================================

  lint:all:
    desc: Run all linters (Rust + Frontend + Trunk)
    deps: [lint:rust, lint:frontend, lint:auth-frontend, lint:trunk]

  lint:rust:
    desc: Lint all Rust code in workspace
    cmds:
      - echo "üîç Ejecutando clippy en todo el workspace..."
      - cargo clippy --workspace --all-targets --all-features -- -D warnings || echo "‚ö†Ô∏è Clippy warnings found"

  lint:frontend:
    desc: Lint main frontend code
    dir: frontend
    cmds:
      - echo "üîç Ejecutando lint en frontend principal..."
      - bun run lint

  lint:auth-frontend:
    desc: Lint auth service frontend code
    dir: backend/auth-service/app
    cmds:
      - echo "üîç Ejecutando lint en frontend de auth..."
      - echo "‚ö†Ô∏è  Auth frontend lint not configured yet"

  lint:trunk:
    desc: Run Trunk.io linting on entire project
    cmds:
      - echo "üîç Ejecutando Trunk.io en todo el proyecto..."
      - |
        if command -v trunk >/dev/null 2>&1; then
          trunk check --all
        else
          echo "‚ö†Ô∏è  Trunk.io not installed, skipping"
        fi

  # ============================================================================
  # AN√ÅLISIS DE SEGURIDAD EST√ÅTICO (SAST)
  # ============================================================================

  sast:all:
    desc: Run all SAST tools
    deps: [sast:semgrep, sast:cargo-audit, sast:trunk-security]

  sast:semgrep:
    desc: Run Semgrep security analysis
    cmds:
      - echo "üîí Ejecutando an√°lisis de seguridad con Semgrep..."
      - |
        if command -v semgrep >/dev/null 2>&1; then
          semgrep --config=auto --error --strict --verbose .
        else
          echo "‚ö†Ô∏è  Semgrep not installed, skipping security analysis"
        fi

  sast:cargo-audit:
    desc: Run Cargo security audit
    cmds:
      - echo "üîí Ejecutando auditor√≠a de seguridad de Cargo..."
      - |
        if ! command -v cargo-audit >/dev/null 2>&1; then
          cargo install cargo-audit
        fi
      - cargo audit

  sast:trunk-security:
    desc: Run Trunk.io security checks
    cmds:
      - echo "üîí Ejecutando checks de seguridad con Trunk.io..."
      - |
        if command -v trunk >/dev/null 2>&1; then
          trunk check --filter=security
        else
          echo "‚ö†Ô∏è  Trunk.io not available, skipping security checks"
        fi

  # ============================================================================
  # TESTING UNITARIO
  # ============================================================================

  test:unit:
    desc: Run all unit tests
    deps: [test:unit:rust, test:unit:frontend, test:unit:auth-frontend]

  test:unit:rust:
    desc: Run Rust unit tests
    cmds:
      - echo "üß™ Ejecutando tests unitarios de Rust..."
      - cargo test --workspace --lib --verbose

  test:unit:frontend:
    desc: Run main frontend unit tests
    dir: frontend
    cmds:
      - echo "üß™ Ejecutando tests unitarios del frontend principal..."
      - bun run test

  test:unit:auth-frontend:
    desc: Run auth frontend unit tests
    dir: backend/auth-service/app
    cmds:
      - echo "üß™ Ejecutando tests unitarios del frontend de auth..."
      - bun run test || echo "‚ö†Ô∏è  Auth frontend tests not configured"

  test:unit:coverage:
    desc: Generate test coverage reports
    deps: [test:unit:coverage:rust, test:unit:coverage:frontend]

  test:unit:coverage:rust:
    desc: Generate Rust coverage
    cmds:
      - echo "üìä Generando cobertura de tests de Rust..."
      - |
        if ! command -v cargo-tarpaulin >/dev/null 2>&1; then
          cargo install cargo-tarpaulin
        fi
      - mkdir -p coverage
      - cargo tarpaulin --workspace --out xml --output-dir coverage/

  test:unit:coverage:frontend:
    desc: Generate frontend coverage
    dir: frontend
    cmds:
      - echo "üìä Generando cobertura de tests del frontend..."
      - |
        if grep -q "test:coverage" package.json; then
          bun run test:coverage
        else
          echo "‚ö†Ô∏è  Frontend coverage script not available"
        fi

  # ============================================================================
  # CONSTRUCCI√ìN
  # ============================================================================

  build:all:
    desc: Build all services (Gateway + Backend + Frontends)
    deps: [build:gateway, build:backend, build:frontend, build:auth-frontend]

  build:gateway:
    desc: Build gateway BFF with Spin
    dir: gateway
    cmds:
      - echo "üèóÔ∏è  Construyendo Gateway BFF..."
      - cargo build --target wasm32-wasi --release
      - spin build

  build:backend:
    desc: Build all backend microservices
    cmds:
      - echo "üèóÔ∏è  Construyendo todos los microservicios backend..."
      - cargo build --workspace --target wasm32-wasi --release --exclude shared

  build:frontend:
    desc: Build main frontend
    dir: frontend
    cmds:
      - echo "üèóÔ∏è  Construyendo frontend principal..."
      - bun run build

  build:auth-frontend:
    desc: Build auth service frontend
    dir: backend/auth-service/app
    cmds:
      - echo "üèóÔ∏è  Construyendo frontend de auth service..."
      - bun run build

  build:auth-service:
    desc: Build complete auth service (Rust + React)
    dir: backend/auth-service
    cmds:
      - echo "üèóÔ∏è  Construyendo auth service completo..."
      - cd app && bun install && bun run build
      - cargo build --target wasm32-wasi --release
      - spin build

  # ============================================================================
  # SERVICIOS DE DESARROLLO
  # ============================================================================

  dev:all:
    desc: Run all services in parallel with dynamic ports
    deps: [dev:gateway, dev:backend, dev:frontend, dev:auth-frontend]

  dev:gateway:
    desc: Run gateway BFF with dynamic port
    dir: gateway
    cmds:
      - echo "üöÄ Iniciando Gateway BFF en puerto {{.GATEWAY_PORT}}..."
      - spin up --listen 0.0.0.0:{{.GATEWAY_PORT}}

  dev:backend:
    desc: Run all backend microservices with dynamic ports
    cmds:
      - echo "üöÄ Iniciando todos los microservicios backend..."
      - |
        # Booking Service
        if [ -f "backend/booking-service/spin.toml" ]; then
          echo "  üì¶ Booking Service en puerto {{.BOOKING_PORT}}"
          cd backend/booking-service && spin up --listen 0.0.0.0:{{.BOOKING_PORT}} &
        fi

        # Notification Service
        if [ -f "backend/notification-service/spin.toml" ]; then
          echo "  üìß Notification Service en puerto {{.NOTIFICATION_PORT}}"
          cd backend/notification-service && spin up --listen 0.0.0.0:{{.NOTIFICATION_PORT}} &
        fi

        # Validation Service
        if [ -f "backend/validation-service/spin.toml" ]; then
          echo "  ‚úÖ Validation Service en puerto {{.VALIDATION_PORT}}"
          cd backend/validation-service && spin up --listen 0.0.0.0:{{.VALIDATION_PORT}} &
        fi

        # Info on Arrival Service
        if [ -f "backend/info-on-arrival-service/spin.toml" ]; then
          echo "  ‚ÑπÔ∏è  Info Arrival Service en puerto {{.INFO_ARRIVAL_PORT}}"
          cd backend/info-on-arrival-service && spin up --listen 0.0.0.0:{{.INFO_ARRIVAL_PORT}} &
        fi

        # Location Service
        if [ -f "backend/location-service/spin.toml" ]; then
          echo "  üìç Location Service en puerto {{.LOCATION_PORT}}"
          cd backend/location-service && spin up --listen 0.0.0.0:{{.LOCATION_PORT}} &
        fi

        # Rate Limiter Service
        if [ -f "backend/rate-limiter-service/spin.toml" ]; then
          echo "  üö¶ Rate Limiter Service en puerto {{.RATE_LIMITER_PORT}}"
          cd backend/rate-limiter-service && spin up --listen 0.0.0.0:{{.RATE_LIMITER_PORT}} &
        fi

        # Reviews Service
        if [ -f "backend/reviews-service/spin.toml" ]; then
          echo "  ‚≠ê Reviews Service en puerto {{.REVIEWS_PORT}}"
          cd backend/reviews-service && spin up --listen 0.0.0.0:{{.REVIEWS_PORT}} &
        fi

        # Security Service
        if [ -f "backend/security-service/spin.toml" ]; then
          echo "  üîí Security Service en puerto {{.SECURITY_PORT}}"
          cd backend/security-service && spin up --listen 0.0.0.0:{{.SECURITY_PORT}} &
        fi

        echo "‚è≥ Esperando a que todos los servicios est√©n listos..."
        wait

  dev:frontend:
    desc: Run main frontend development server
    dir: frontend
    cmds:
      - echo "üöÄ Iniciando frontend principal en puerto {{.FRONTEND_PORT}}..."
      - bun run dev -- --host 0.0.0.0 --port {{.FRONTEND_PORT}}

  dev:auth-frontend:
    desc: Run auth service frontend development server
    dir: backend/auth-service/app
    cmds:
      - echo "üöÄ Iniciando frontend de auth en puerto {{.AUTH_FRONTEND_PORT}}..."
      - bun run dev -- --host 0.0.0.0 --port {{.AUTH_FRONTEND_PORT}} || echo "‚ö†Ô∏è  Auth frontend dev not configured"

  # ============================================================================
  # TESTING DE INTEGRACI√ìN
  # ============================================================================

  test:integration:
    desc: Run integration tests
    deps: [test:integration:api, test:integration:database]

  test:integration:api:
    desc: "üîó Ejecutando tests de integraci√≥n de API"
    dir: tests/api
    cmds:
      - |
        for test_file in *.js *.mjs; do
          if [ -f "$test_file" ]; then
            echo "  üß™ Ejecutando $test_file..."
            if [[ "$test_file" == *.mjs ]]; then
              node "$test_file" || echo "‚ö†Ô∏è  Test $test_file failed"
            else
              node "$test_file" || echo "‚ö†Ô∏è  Test $test_file failed"
            fi
          fi
        done

  test:integration:database:
    desc: "üóÑÔ∏è  Ejecutando tests de integraci√≥n de base de datos"
    cmds:
      - echo "üß™ Ejecutando test de DB: db-integration.test.sql"
      - |
        if command -v psql >/dev/null 2>&1 && [ -f "database/test/db-integration.test.sql" ]; then
          psql "${DATABASE_URL:-postgresql://localhost:5432/albergue_dev}" -f "database/test/db-integration.test.sql" || echo "‚ö†Ô∏è  Database test failed"
        else
          echo "‚ö†Ô∏è  PostgreSQL client not available or test file not found"
        fi

  # ============================================================================
  # TESTING END-TO-END
  # ============================================================================

  test:e2e:
    desc: Run all E2E tests
    deps: [test:e2e:testcafe, test:e2e:comprehensive]

  test:e2e:testcafe:
    desc: "üé≠ Ejecutando tests E2E con TestCafe"
    dir: tests/e2e/testcafe
    cmds:
      - |
        # Try different ways to find testcafe
        TESTCAFE_CMD=""
        if command -v testcafe >/dev/null 2>&1; then
          TESTCAFE_CMD="testcafe"
        elif command -v npx >/dev/null 2>&1; then
          TESTCAFE_CMD="npx testcafe"
        elif [ -f "../../../frontend/node_modules/.bin/testcafe" ]; then
          TESTCAFE_CMD="../../../frontend/node_modules/.bin/testcafe"
        fi

        if [ -n "$TESTCAFE_CMD" ]; then
          for test_file in *.js; do
            if [ -f "$test_file" ]; then
              echo "  üß™ Ejecutando E2E test: $test_file"
              $TESTCAFE_CMD chrome:headless "$test_file" || echo "‚ö†Ô∏è  E2E test $test_file failed"
            fi
          done
        else
          echo "‚ö†Ô∏è  TestCafe not available, skipping E2E tests"
          echo "üí° Hint: Run 'cd frontend && bun add -D testcafe' to install TestCafe"
        fi

  test:e2e:comprehensive:
    desc: "üé≠ Ejecutando suite completa de tests E2E"
    dir: tests/runners
    cmds:
      - |
        if [ -f "run-comprehensive-testcafe.js" ]; then
          node run-comprehensive-testcafe.js || echo "‚ö†Ô∏è  Comprehensive E2E tests failed"
        else
          echo "‚ö†Ô∏è  Comprehensive test runner not found"
        fi

  # ============================================================================
  # TESTING DE SEGURIDAD DIN√ÅMICO (DAST)
  # ============================================================================

  security:dast:
    desc: Run DAST security scans
    deps: [security:dast:zap, security:dast:nuclei]

  security:dast:zap:
    desc: Run OWASP ZAP security scan
    cmds:
      - echo "üîí Ejecutando escaneo de seguridad con OWASP ZAP..."
      - |
        if command -v zap-baseline.py >/dev/null 2>&1; then
          if [ -f "tests/infrastructure/security/zap-rules.tsv" ]; then
            zap-baseline.py -t {{.FRONTEND_URI}} -c tests/infrastructure/security/zap-rules.tsv
          else
            zap-baseline.py -t {{.FRONTEND_URI}}
          fi
        else
          echo "‚ö†Ô∏è  OWASP ZAP not installed, skipping DAST scan"
        fi

  security:dast:nuclei:
    desc: Run Nuclei vulnerability scanner
    cmds:
      - echo "üîí Ejecutando escaneo de vulnerabilidades con Nuclei..."
      - |
        if command -v nuclei >/dev/null 2>&1; then
          nuclei -u {{.FRONTEND_URI}} -severity medium,high,critical
        else
          echo "‚ö†Ô∏è  Nuclei not installed, skipping vulnerability scan"
        fi

  # ============================================================================
  # TESTING DE RENDIMIENTO
  # ============================================================================

  performance:all:
    desc: Run all performance tests
    deps: [performance:lighthouse, performance:k6]

  performance:lighthouse:
    desc: Run Lighthouse performance audit
    cmds:
      - echo "‚ö° Ejecutando auditor√≠a de rendimiento con Lighthouse..."
      - |
        # Try different ways to find lighthouse
        LIGHTHOUSE_CMD=""
        if command -v lighthouse >/dev/null 2>&1; then
          LIGHTHOUSE_CMD="lighthouse"
        elif command -v npx >/dev/null 2>&1; then
          LIGHTHOUSE_CMD="npx lighthouse"
        elif [ -f "frontend/node_modules/.bin/lighthouse" ]; then
          LIGHTHOUSE_CMD="frontend/node_modules/.bin/lighthouse"
        fi

        if [ -n "$LIGHTHOUSE_CMD" ]; then
          mkdir -p tests/infrastructure/performance
          echo "  üèÉ Running Lighthouse audit on {{.FRONTEND_URI}}"
          $LIGHTHOUSE_CMD {{.FRONTEND_URI}} --output json --output-path ./tests/infrastructure/performance/lighthouse-results.json || echo "‚ö†Ô∏è  Lighthouse audit failed"
          echo "  üèÉ Running Lighthouse audit on {{.FRONTEND_URI}}/admin"
          $LIGHTHOUSE_CMD {{.FRONTEND_URI}}/admin --output json --output-path ./tests/infrastructure/performance/lighthouse-admin-results.json || echo "‚ö†Ô∏è  Lighthouse admin audit failed"
        else
          echo "‚ö†Ô∏è  Lighthouse not available, trying to install locally..."
          if cd frontend && bun add -D lighthouse; then
            echo "‚úÖ Lighthouse installed locally"
            LIGHTHOUSE_CMD="frontend/node_modules/.bin/lighthouse"
            mkdir -p ../tests/infrastructure/performance
            $LIGHTHOUSE_CMD {{.FRONTEND_URI}} --output json --output-path ../tests/infrastructure/performance/lighthouse-results.json || echo "‚ö†Ô∏è  Lighthouse audit failed"
          else
            echo "‚ö†Ô∏è  Failed to install Lighthouse"
          fi
        fi

  performance:k6:
    desc: Run k6 load testing
    cmds:
      - echo "‚ö° Ejecutando tests de carga con k6..."
      - |
        if command -v k6 >/dev/null 2>&1; then
          if [ -f "tests/infrastructure/performance/api-load-test.js" ]; then
            k6 run tests/infrastructure/performance/api-load-test.js
          else
            echo "‚ö†Ô∏è  k6 load test script not found"
          fi
        else
          echo "‚ö†Ô∏è  k6 not installed, skipping load tests"
        fi

  # ============================================================================
  # COMPATIBILIDAD CROSS-BROWSER Y DISPOSITIVOS
  # ============================================================================

  compatibility:all:
    desc: Run cross-browser and device compatibility tests
    deps: [compatibility:browsers, compatibility:devices]

  compatibility:browsers:
    desc: Test on major browsers
    cmds:
      - echo "üåê Ejecutando tests de compatibilidad de navegadores..."
      - |
        # Try different ways to find testcafe
        TESTCAFE_CMD=""
        if command -v testcafe >/dev/null 2>&1; then
          TESTCAFE_CMD="testcafe"
        elif command -v npx >/dev/null 2>&1; then
          TESTCAFE_CMD="npx testcafe"
        elif [ -f "frontend/node_modules/.bin/testcafe" ]; then
          TESTCAFE_CMD="frontend/node_modules/.bin/testcafe"
        fi

        if [ -n "$TESTCAFE_CMD" ]; then
          if [ -f "tests/e2e/testcafe/test-dni-simple.js" ]; then
            echo "  üß™ Testing Chrome..."
            $TESTCAFE_CMD chrome:headless tests/e2e/testcafe/test-dni-simple.js || echo "‚ö†Ô∏è  Chrome test failed"
            echo "  üß™ Testing Firefox..."
            $TESTCAFE_CMD firefox:headless tests/e2e/testcafe/test-dni-simple.js || echo "‚ö†Ô∏è  Firefox test failed"
            echo "  üß™ Testing Safari..."
            $TESTCAFE_CMD safari tests/e2e/testcafe/test-dni-simple.js || echo "‚ö†Ô∏è  Safari not available"
            echo "  üß™ Testing Edge..."
            $TESTCAFE_CMD edge tests/e2e/testcafe/test-dni-simple.js || echo "‚ö†Ô∏è  Edge not available"
          else
            echo "‚ö†Ô∏è  Browser compatibility test file not found"
          fi
        else
          echo "‚ö†Ô∏è  TestCafe not available, skipping browser compatibility tests"
        fi

  compatibility:devices:
    desc: Test responsive design on different devices
    cmds:
      - echo "üì± Ejecutando tests de compatibilidad de dispositivos..."
      - |
        # Try different ways to find testcafe
        TESTCAFE_CMD=""
        if command -v testcafe >/dev/null 2>&1; then
          TESTCAFE_CMD="testcafe"
        elif command -v npx >/dev/null 2>&1; then
          TESTCAFE_CMD="npx testcafe"
        elif [ -f "frontend/node_modules/.bin/testcafe" ]; then
          TESTCAFE_CMD="frontend/node_modules/.bin/testcafe"
        fi

        if [ -n "$TESTCAFE_CMD" ]; then
          if [ -f "tests/e2e/testcafe/test-dni-simple.js" ]; then
            echo "  üì± Testing iPhone..."
            $TESTCAFE_CMD chrome:headless:emulation:device=iPhone tests/e2e/testcafe/test-dni-simple.js || echo "‚ö†Ô∏è  iPhone test failed"
            echo "  üì± Testing iPad..."
            $TESTCAFE_CMD chrome:headless:emulation:device=iPad tests/e2e/testcafe/test-dni-simple.js || echo "‚ö†Ô∏è  iPad test failed"
            echo "  üñ•Ô∏è  Testing Desktop..."
            $TESTCAFE_CMD chrome:headless:emulation:device=desktop tests/e2e/testcafe/test-dni-simple.js || echo "‚ö†Ô∏è  Desktop test failed"
          else
            echo "‚ö†Ô∏è  Device compatibility test file not found"
          fi
        else
          echo "‚ö†Ô∏è  TestCafe not available, skipping device compatibility tests"
        fi

  # ============================================================================
  # UTILIDADES
  # ============================================================================

  clean:
    desc: Clean build artifacts and caches
    cmds:
      - echo "üßπ Limpiando artefactos de construcci√≥n..."
      - cargo clean
      - rm -rf frontend/dist/
      - rm -rf frontend/node_modules/.cache/
      - rm -rf backend/auth-service/app/dist/
      - rm -rf backend/auth-service/app/node_modules/.cache/
      - rm -rf coverage/
      - rm -rf tests/e2e/outputs/
      - rm -rf .env.ports
      - echo "‚úÖ Limpieza completada"

  preview:
    desc: Preview built application
    deps: [build:all]
    dir: frontend
    cmds:
      - echo "üëÄ Iniciando preview de la aplicaci√≥n..."
      - bun run serve -- --host 0.0.0.0 --port 4173

  deploy:
    desc: Deploy to production
    deps: [ci:full]
    cmds:
      - echo "üöÄ Desplegando a producci√≥n..."
      - |
        if command -v spin >/dev/null 2>&1; then
          spin deploy
        else
          echo "‚ö†Ô∏è  Spin CLI not available for deployment"
        fi

  # ============================================================================
  # HEALTH CHECKS
  # ============================================================================

  health:check:
    desc: Check application health
    cmds:
      - echo "üè• Verificando salud de la aplicaci√≥n..."
      - curl -f {{.FRONTEND_URI}}/api/health || echo "‚ö†Ô∏è  Frontend health check failed"
      - curl -f {{.GATEWAY_URI}}/api/health || echo "‚ö†Ô∏è  Gateway health check failed"

  # ============================================================================
  # OPERACIONES DE BASE DE DATOS
  # ============================================================================

  db:migrate:
    desc: Run database migrations
    dir: database
    cmds:
      - echo "üóÑÔ∏è  Ejecutando migraciones de base de datos..."
      - |
        if [ -f "scripts/migrate-postgres.sh" ]; then
          ./scripts/migrate-postgres.sh
        else
          echo "‚ö†Ô∏è  Database migration script not found"
        fi

  db:seed:
    desc: Seed database with test data
    dir: database
    cmds:
      - echo "üå± Sembrando base de datos con datos de prueba..."
      - |
        if command -v psql >/dev/null 2>&1 && [ -f "seed/dev_seed.sql" ]; then
          psql "${DATABASE_URL}" -f seed/dev_seed.sql
        else
          echo "‚ö†Ô∏è  PostgreSQL client not available or seed file not found"
        fi

  db:reset:
    desc: Reset database
    deps: [db:migrate, db:seed]

  # ============================================================================
  # VERIFICACI√ìN DE ENTORNO NIX
  # ============================================================================

  nix:check:
    desc: Verify Nix packages are available
    cmds:
      - echo "‚ùÑÔ∏è  Verificando paquetes de Nix..."
      - rustc --version && echo "‚úÖ Rust available"
      - node --version && echo "‚úÖ Node.js available"
      - bun --version && echo "‚úÖ Bun available"
      - caddy version && echo "‚úÖ Caddy available"
      - spin --version && echo "‚úÖ Spin available"
      - trunk --version && echo "‚úÖ Trunk available"
      - echo "‚úÖ Todos los paquetes de Nix est√°n disponibles"